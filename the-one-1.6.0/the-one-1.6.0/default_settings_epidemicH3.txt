## Default settings for the simulation### Scenario settingsScenario.name = EpidemicH3-yangkeduaScenario.simulateConnections = falseScenario.updateInterval = 1# 43200s == 12h# Scenario.endTime = 10000000# 86400 == 1d# Scenario.endTime = 350000Scenario.endTime = 274883## Interface-specific settings:# type : which interface class the interface belongs to# For different types, the sub-parameters are interface-specific# For SimpleBroadcastInterface, the parameters are:# transmitSpeed : transmit speed of the interface (bytes per second)# transmitRange : range of the interface (meters)# "Bluetooth" interface for all nodesbtInterface.type = SimpleBroadcastInterface# Transmit speed of 2 Mbps = 250kBpsbtInterface.transmitSpeed = 250kbtInterface.transmitRange = 10# High speed, long range, interface for group 4highspeedInterface.type = SimpleBroadcastInterfacehighspeedInterface.transmitSpeed = 10MhighspeedInterface.transmitRange = 10# Define 6 different node groupsScenario.nrofHostGroups = 1## Group-specific settings:# groupID : Group's identifier. Used as the prefix of host names# nrofHosts: number of hosts in the group# movementModel: movement model of the hosts (valid class name from movement package)# waitTime: minimum and maximum wait times (seconds) after reaching destination# speed: minimum and maximum speeds (m/s) when moving on a path# bufferSize: size of the message buffer (bytes)# router: router used to route messages (valid class name from routing package)# activeTimes: Time intervals when the nodes in the group are active (start1, end1, start2, end2, ...)# msgTtl : TTL (minutes) of the messages created by this host group, default=infinite## Group and movement model specific settings# pois: Points Of Interest indexes and probabilities (poiIndex1, poiProb1, poiIndex2, poiProb2, ... )#       for ShortestPathMapBasedMovement# okMaps : which map nodes are OK for the group (map file indexes), default=all#          for all MapBasedMovent models# routeFile: route's file path - for MapRouteMovement# routeType: route's type - for MapRouteMovement# Common settings for all groupsGroup.movementModel = StationaryMovementGroup.nodeLocation = 10,10Group.router = DecisionEngineRouterDecisionEngineRouter.decisionEngine = EpidemicRouterEASkripsiGroup.initialEnergy = 10000Group.scanEnergy = 0.05Group.transmitEnergy = 2Group.scanResponseEnergy = 0.05Group.bufferSize = 10MGroup.waitTime = 0,120# All nodes have the bluetooth interfaceGroup.nrofInterfaces = 1Group.interface1 = btInterface# Walking speedsGroup.speed = 0.5, 1.5# Message TTL of 300 minutes (5 hours)Group.msgTtl = 1440Group.nrofHosts = 41# group1 (pedestrians) specific settingsGroup1.groupID = p## Message creation parameters# How many event generatorsEvents.nrof = 2# Class of the first event generatorEvents1.class = StandardEventReaderEvents1.filePath = Haggle3-Infocom5.csv# Events1.filePath = RealityConnectionTraceFinal.txtEvents2.class = MessageEventGenerator# (following settings are specific for the MessageEventGenerator class)# Creation interval in seconds (one new message every 25 to 35 seconds)Events2.interval = 390,410# Message sizes (500kB - 1MB)Events2.size = 10k# range of message source/destination addressesEvents2.hosts = 0,40# Message ID prefixEvents2.prefix = M## Movement model settings# seed for movement models' pseudo random number generator (default = 0)MovementModel.rngSeed = 1# World's size for Movement Models without implicit size (width, height; meters)MovementModel.worldSize = 150,150# How long time to move hosts in the world before real simulationMovementModel.warmup = 1000## Map based movement -movement model specific settingsMapBasedMovement.nrofMapFiles = 4MapBasedMovement.mapFile1 = data/roads.wktMapBasedMovement.mapFile2 = data/main_roads.wktMapBasedMovement.mapFile3 = data/pedestrian_paths.wktMapBasedMovement.mapFile4 = data/shops.wkt## Reports - all report names have to be valid report classes# how many reports to loadReport.nrofReports = 2# length of the warm up period (simulated seconds)Report.warmup = 0# default directory of reports (can be overridden per Report with output setting)Report.reportDir = reports/TestEpidemic/Skenarioku/10-1440# Report classes to load# Report.report1 = EnergyLevelReport# EnergyLevelReport.granularity = 600# Report.report1 = EnergyOccupancyPerTime# Report.report3 = BufferOccupancyPerTimeReport.report1 = energiReport.report2 = MessageStatsReport#Report.report3 = turunan1#Report.report4 = turunan2Report.report3 = networkLifetime# Report.report4 = asli# Report.report5 = totalKontak#Report.report1 = MessageTransferedReport# Report.report5 = normalisasi1# Report.report6 = normalisasi2#Report.report2 = DeliveredMessagesReport## Default settings for some routers settings# ProphetRouter.secondsInTimeUnit = 30# SprayAndWait.nrofCopies = 6# RoutingSprayAndWaitImplements.binaryMode = true## Optimization settings -- these affect the speed of the simulation## see World class for details.Optimization.cellSizeMult = 5Optimization.randomizeUpdateOrder = true## GUI settings# GUI underlay image settingsGUI.UnderlayImage.fileName = data/helsinki_underlay.png# Image offset in pixels (x, y)GUI.UnderlayImage.offset = 64, 20# Scaling factor for the imageGUI.UnderlayImage.scale = 4.75# Image rotation (radians)GUI.UnderlayImage.rotate = -0.015# how many events to show in the log panel (default = 30)GUI.EventLogPanel.nrofEvents = 100# Regular Expression log filter (see Pattern-class from the Java API for RE-matching details)#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$